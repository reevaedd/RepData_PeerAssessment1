dir
path
path()
help.start()
q
q()
version()
ver()
find.package("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
pwd
exit
quit
q
exit
bye()
pwd
info()
skip()
bye()
pwd
play()
pwd
pwd
q()
library("swirl")
swirl()
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z -1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0,10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect > 1
tf <- num_vect[>1]
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Reev")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
sample(c(y, z), 100)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y . 0]
y[y > 0]
x[x > 0]
x[!is.na(x) & x]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
a <- c(3, 5, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vact[c("foo", "bar")]
vect[c("foo", "bar")]
myVector <- c(1:20)
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, 4, 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMattrix)
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
attributes(myData)
myData(colnames)<- cnames
colnames(myData) <- cnames
myData
bye()
q()
x <- list(a = 1:5, b = rnorm (10))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
x <- 1:4
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[, 1])
rnorm(2)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quartile, probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, range)
library(datasets)
head(airquality)
airquality
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
mapply(rep, 1:4, 4:1)
debug(ls)
?debug
set.seed(1)
rpois(5, 2)
library(datasets)
getwd()
library(XML)
getwd()
library(XML)
install.packages("XML")
library(XML)
fileUrl <- "http://www.3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[1]
rootNode[[1]]
rootNode[[1]][1]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode,"//name", xmlValue)
library(data.table)
install.packages("data.table")
library(data.table)
DF = data.frame(x=rnorm(9), y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
DF
getwd()
setwd("C:/Users/ReevAEdd/Documents/R/Getting and Cleaning Data")
setwd("C:/Users/ReevAEdd/My Documents/R/Getting and Cleaning Data")
setwd("C:/Users/ReevAEdd/My Documents/R/Getting and Cleaning Data")
q()
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
q()
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
q()
library(ggplot2)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)")
colors()
par("bg")
q()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ba0c760a55c548e68882f9255756927ac47df8fa")
myapp <- oauth_app("github", "5368a09e7a2784cae808")
q()
x <- oauth_endpoints("github")
library(httr)
x <- oauth_endpoints("github")
x
myapp <- oauth_app("github", "5368a09e7a2784cae808")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "5368a09e7a2784cae808")
myapp <- oauth_app("github", "5368a09e7a2784cae808")
getwd()
myapp <- oauth_app("github", "5368a09e7a2784cae808", "ba0c760a55c548e68882f9255756927ac47df8fa")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
req <- GET("", config(token = github_token))
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
install.packages("jsonlite")
install.packages("jsonlite")
content(req)
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
pwd()
getwd()
q()
d1 = date()
d1
d2 <- sys.date(0)
d2 <- sys.date()
d2 <- Sys.date()
d2 <- Sys.Date()
d2
q()
example(points)
x <- rnorm(100)
plot(x, y)
y <- rnorm(100)
plot(x, y)
example(points)
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
nrow(datasets)
nrow(faithful)
names(faithful)
q()
library(lattice)
library(datasets
)
nrow(airquality)
ncol(airquality)
names(airquality)
xyplot(Ozone ~ Wind, data = airquality)
library(datasets)
library(lattice)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p<- xyplot(Ozone ~ Wind, data = airquality)
print(p)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
class(f)
f[1]
length(f)
f
class(x)
length(x)
x
y <- x + f -f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group1", "Group2"))
f
f <- factor(f, labels = c("Group1", "Group2", "Group3"))
f
xyplot(y ~ x | f, layout = c(2, 1))
xyplot(y ~ x | f, panel = function(x, y, ...) { panel.xyplot(x, y, ...) panel.abline(h = median(y), lty = 2)})
xyplot(y ~ x | f, layout = c(2, 1))
xyplot(y ~ x | f, panel = function(x, y, ...) { panel.xyplot(x, y, ...) panel.abline(h = median(y), lty = 2)})
x
y
x
y
xyplot(y ~ x | f, panel = function(x, y, ...) { panel.xyplot(x, y, ...) panel.abline(h = median(y), lty = 2)})
xyplot(y ~ x | f, panel = function(x, y, ...) { panel.xyplot(x, y, ...) panel.abline(h = median(y), lty = 2)})
xyplot(y ~ x | f, panel = function(x, y,...) {})
xyplot(y ~ x | f, panel = function(x, y,...) { panel.xyplot(x, y, ...) panel.lmline(x, y, col = 2)})
f
xyplot(y ~ x | f, panel = function(x, y) { panel.xyplot(x, y) panel.lmline(x, y, col = 2)})
xyplot(y ~ x | f, panel = function(x, y,...) { panel.xyplot(x, y,...) panel.lmline(x, y, col = 2)})
xyplot(y ~ x | f, layout = c(2, 1))
xyplot(y ~ x | f, panel = function(x, y,...) { panel.xyplot(x, y,...) panel.lmline(x, y, col = 2)})
xyplot(y ~ x | f, layout = c(2, 1))
median(y)
panel.lm(x, y, col = 2)
panel.lmline(x, y, col = 2)
panel.lmline(x, y, col = 2)
panel.xyplot(x, y, ...)
xyplot(x, y, ...)
xyplot(y ~ x | f, layout = c(2, 1))
xyplot(y ~ x | f, panel = function(x, y,...) { panel.xyplot(x, y,...) panel.lmline(x, y, col = 2)})
xyplot(y ~ x | f, panel = function(x, y, ...) { panel.xyplot(x, y, ...) panel.abline(h = median(y), lty = 2)})
library(lattice)
xyplot(y ~ x | f, panel = function(x, y, ...) { panel.xyplot(x, y, ...) panel.abline(h = median(y), lty = 2)})
library(lattice)
panel.smoother <- function(x, y){ panel.xyplot(x, y), panel.loess(x, y)}
panel.smoother <- function(x, y){ panel.xyplot(x, y) panel.loess(x, y)}
panel.smoother <- function(x, y) {           panel.xyplot(x, y)                          panel.loess(x, y)}
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1))
xyplot(y ~ x | f, panel = function(x, y, ...) {panel.xyplot(x, y, ...) panel.abline(h = median(y), lty = 2)})
setwd("~/GitHub/RepData_PeerAssessment1")
activityData <- read.csv("./activity.csv", head = TRUE)
nrow(activityData)
activityData <- data.frame(lapply(activityData, as.character), stringsAsFactors = FALSE)
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData$steps <- as.numeric(activityData$steps)
activityData$interval <- as.numeric(activityData$interval)
filledData <- activityData
for (i in 1:nrow(filledData)) {
if(is.na(filledData[i, 1])) {
idx <- match(filledData[i, 3], groupedMean$interval)
filledData[i, 1] <- groupedMean[idx, 2]
}
}
cleanData <- na.omit(activityData)
cleanData <- data.frame(lapply(cleanData, as.character), stringsAsFactors = FALSE)
cleanData$date <- as.Date(cleanData$date, "%Y-%m-%d")
cleanData$steps <- as.numeric(cleanData$steps)
cleanData$interval <- as.numeric(cleanData$interval)
groupedMean <- aggregate(steps ~ interval, cleanData, mean)
activityData <- data.frame(lapply(activityData, as.character), stringsAsFactors = FALSE)
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData$steps <- as.numeric(activityData$steps)
activityData$interval <- as.numeric(activityData$interval)
filledData <- activityData
for (i in 1:nrow(filledData)) {
if(is.na(filledData[i, 1])) {
idx <- match(filledData[i, 3], groupedMean$interval)
filledData[i, 1] <- groupedMean[idx, 2]
}
}
head(filedData)
head(filledData)
filledData$day <- weekdays(filledData$date)
for (i in 1: nrow(filledData)) {
if (filledData[i, 4] == "Saturday" || filledData[i, 4] == "Sunday") {
filledData[i, 4] <- "weekend"
}
else {
filledData[i, 4] <- "weekday"
}
}
nrow(filledData)
names(filledData)
head(filledData)
str(filledData)
filledData$day <- as.factor(filledData$day)
str(filledData)
weekdaySteps <- subset(filledData, filledData$day == "weekday")
nrow(weekday)
nrow(weekdaySteps)
weekendSteps <- subset(filledData, filledData$day == "weekend")
nrow(weekendSteps)
head(weekendSteps)
tail(weekendSteps)
head(weekendSteps, n =50)
head(weekendSteps, n =150)
head(weekendSteps, n =250)
head(weekendSteps, n =300)
groupedWeekday <- aggregate(steps ~ interval, weekdaySteps, mean)
nrow(groupedweekay)
nrow(groupedweekday)
nrow(groupedWeekday)
groupedWeekend <- aggregate(steps ~ interval, weekendSteps, mean)
nrow(groupedWeekend)
library(lattice)
names(filledData)
str(filledData)
xyplot(steps ~ interval | day, data = filledData, type = "l", layout = c(1, 2), as.table = TRUE, xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken")
grouped <- rbind(groupedWeekday, groupedWeekend)
xyplot(steps ~ interval | day, data = grouped, type = "l", layout = c(1, 2), as.table = TRUE, xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken")
names(grouped)
names(groupedWeekday)
groupedWeekday$day <- "weekday"
names(groupedWeekday)
head(groupedWeekday, n = 3)
names(groupedWeekend)
groupedWeekend$day <- "weekend"
head(groupedWeekend, n =3)
groupedData <- rbind(groupedWeekday, groupedWeekend)
head(groupedData, n =3)
xyplot(steps ~ interval | day, data = groupedData, type = "l", layout = c(1, 2), as.table = TRUE, xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken")
xyplot(steps ~ interval | day, data = groupedData, type = "l", layout = c(1, 2), as.table = TRUE, xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", main = "Activity Patterns Between Weekdays and Weekends")
cleanData <- na.omit(activityData)
rowNum2 <- nrow(cleanData)
